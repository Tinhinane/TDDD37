part 2
======

Q3. Create tables: 

CREATE TABLE Destination(
    airportCode VARCHAR(3),
    name VARCHAR(30),
    country VARCHAR(30),
    CONSTRAINT pk_destination PRIMARY KEY(airportCode)
);

CREATE TABLE Year(
    year INTEGER NOT NULL, 
    factor DOUBLE NOT NULL, 
    CONSTRAINT pk_year PRIMARY KEY(year)
); 

CREATE TABLE Day(
   day VARCHAR(10),
   year INTEGER NOT NULL,
   factor DOUBLE NOT NULL,
   CONSTRAINT pk_day PRIMARY KEY(day, year),
   CONSTRAINT fk_day_year FOREIGN KEY(year) REFERENCES Year(year)
);

CREATE TABLE Route(
    id INTEGER NOT NULL AUTO_INCREMENT, 
    routePrice INTEGER DEFAULT 0, 
    year INTEGER, 
    departure VARCHAR(3), 
    arrival VARCHAR(3),
 
    CONSTRAINT pk_route PRIMARY KEY(id)
);

CREATE TABLE WeeklyFlight(
    id INTEGER NOT NULL AUTO_INCREMENT, 
    departureTime TIME, 
    route INTEGER, 
    day VARCHAR(10), 
    year INTEGER, 
    
    CONSTRAINT pk_weeklyflight PRIMARY KEY(id)
);

CREATE TABLE Flight(
    flightNumber INTEGER NOT NULL, 
    nbrOfFreeSeats INTEGER NOT NULL,
    week INTEGER NOT NULL, 
    weeklyFlight INTEGER,
    
    CONSTRAINT pk_flight PRIMARY KEY(flightNumber) 
);

CREATE TABLE Reservation(
    reservationNbr INTEGER NOT NULL,
    flight INTEGER NOT NULL, 
    CONSTRAINT pk_reservation PRIMARY KEY(reservationNbr)
);

CREATE TABLE Contact(
    email VARCHAR(30) NOT NULL, 
    phone BIGINT, 
    
    CONSTRAINT pk_contact PRIMARY KEY(email)
);

CREATE TABLE Passenger(
     passportNbr INTEGER NOT NULL,
     familyName VARCHAR(30),
     firstName VARCHAR(30),
     contact VARCHAR(30) NOT NULL,
     
     CONSTRAINT pk_passenger PRIMARY KEY(passportNbr)
);

CREATE TABLE PassengerReservation(
    passportNbr INTEGER NOT NULL,
    reservation INTEGER NOT NULL, 
    ticketNbr INTEGER, 
    
    CONSTRAINT pk_PassengerReservation PRIMARY KEY(passportNbr, reservation)
);

CREATE TABLE Payment(
   id INTEGER NOT NULL, 
   cardNumber BIGINT NOT NULL,
   cardHolder VARCHAR(30), 
   price DOUBLE, 
   contact VARCHAR(30) NOT NULL,
   
   CONSTRAINT pk_payment PRIMARY KEY(id)
);

CREATE TABLE Booking(
    ref_reservation INTEGER NOT NULL,
    payment INTEGER NOT NULL, 
    
    CONSTRAINT pk_booking PRIMARY KEY(ref_reservation)
);

------------Alter Tables

ALTER TABLE Route ADD CONSTRAINT fk_route_year FOREIGN KEY(year) REFERENCES Year(year);
ALTER TABLE Route ADD CONSTRAINT fk_route_departure FOREIGN KEY(departure) REFERENCES Destination(airportCode);
ALTER TABLE Route ADD CONSTRAINT fk_route_arrival FOREIGN KEY(arrival) REFERENCES Destination(airportCode);

ALTER TABLE WeeklyFlight ADD CONSTRAINT fk_wf_route FOREIGN KEY(route) REFERENCES Route(id);
ALTER TABLE WeeklyFlight ADD CONSTRAINT fk_wf_day FOREIGN KEY(day) REFERENCES Day(day);
ALTER TABLE WeeklyFlight ADD CONSTRAINT fk_wf_year FOREIGN KEY(year) REFERENCES Year(year);  
    
ALTER TABLE Flight ADD CONSTRAINT fk_flight_wf FOREIGN KEY(weeklyFlight) REFERENCES WeeklyFlight(id);

ALTER TABLE Reservation ADD CONSTRAINT fk_reservation_flight FOREIGN KEY(flight) REFERENCES Flight(flightNumber);  

ALTER TABLE Passenger ADD CONSTRAINT fk_passenger_contact FOREIGN KEY(contact) REFERENCES Contact(email); 

ALTER TABLE PassengerReservation ADD CONSTRAINT fk_RP_reservation FOREIGN KEY(reservation) REFERENCES Reservation(reservationNbr);
ALTER TABLE PassengerReservation ADD CONSTRAINT fk_RP_passenger FOREIGN KEY(passportNbr) REFERENCES Passenger(passportNbr);

ALTER TABLE Payment ADD CONSTRAINT fk_payment_contact FOREIGN KEY(contact) REFERENCES Contact(email);

ALTER TABLE Booking ADD CONSTRAINT fk_booking_payment FOREIGN KEY(payment) REFERENCES Payment(id);
ALTER TABLE Booking ADD CONSTRAINT fk_booking_reservation FOREIGN KEY(ref_reservation) REFERENCES Reservation(reservationNbr);



-----------3) Add procedures

a)  addYear(year, factor)
delimiter //
CREATE PROCEDURE addYear(IN iyear INTEGER, IN ifactor DOUBLE)
BEGIN 
    INSERT INTO Year(year, factor)
    VALUES (iyear, ifactor);
END;
//
delimiter ;

b) addDay(year, day, factor)
delimiter //
CREATE PROCEDURE addDay(IN iyear INTEGER, IN iday VARCHAR(10), IN ifactor DOUBLE)
BEGIN 
    INSERT INTO Day(day, year, factor)
    VALUES (iday, iyear, ifactor);
END;
//
delimiter ;

c) addDestination(airport_code, name, country)
delimiter //
CREATE PROCEDURE addDestination(IN iairport_code VARCHAR(3), IN iname VARCHAR(30), IN icountry VARCHAR(30))
BEGIN 
    INSERT INTO Destination(airportCode, name, country)
    VALUES (iairport_code, iname, icountry);
END;
//
delimiter ;

d) 

delimiter //
CREATE PROCEDURE addRoute(IN departure_airport_code VARCHAR(3), IN arrival_airport_code VARCHAR(3), IN year INTEGER, routePrice DOUBLE)
BEGIN
    INSERT INTO Route(routePrice, year, departure, arrival)
    VALUES(routePrice, year, departure_airport_code, arrival_airport_code);
END;
//
delimiter ;

e) 

*****Can be helpful****FindRoute
delimiter //
CREATE PROCEDURE findRoute(IN departure_airport_code VARCHAR(3), IN arrival_airport_code VARCHAR(3), IN iyear INTEGER)
BEGIN
   SELECT id FROM Route 
   WHERE year=iyear AND arrival=arrival_airport_code AND departure=departure_airport_code;
END;
//
delimiter ;
*****************************



**************************addFlight
delimiter //
CREATE PROCEDURE addFlight(IN departure_airport_code VARCHAR(3), IN arrival_airport_code VARCHAR(3), IN iyear INTEGER, IN iday VARCHAR(10), IN departure_time TIME)
BEGIN
    DECLARE lastWeeklyFlightAdded INTEGER;
    DECLARE i INT UNSIGNED DEFAULT 1;
    INSERT INTO WeeklyFlight(departureTime, route, day, year)
    VALUES ( departure_time, 
             (SELECT id FROM Route 
                WHERE year=iyear AND arrival=arrival_airport_code AND             departure=departure_airport_code)
             , 
             iday,
             iyear);
     SET lastWeeklyFlightAdded := LAST_INSERT_ID();
     WHILE i < 52 DO
        INSERT INTO Flight (week, weeklyFlight) VALUES (i, lastWeeklyFlightAdded);
        SET i := i + 1;
     END WHILE;
END;
//
delimiter ;







departureTime TIME, 
    route INTEGER, 
    day VARCHAR(10), 
    year INTEGER, 
    
    
    
 addFlight(departure_airport_code,
arrival_airport_code, year, day, departure_time); 



CALL addRoute("HOB","MIT",2011,1500);
CALL addFlight("MIT","HOB", 2011, "Sunday", "11:00:00");





